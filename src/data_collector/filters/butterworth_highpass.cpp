#include "butterworth_highpass.h"

namespace TiAScope
{
/**
 * The parameters of this filters were computed using the matlab script 'highpass_filters.m'!
 */
const double ButterworthHighpass::NORMFREQS[] = { 0.00312500000000, 0.00156250000000, 0.00078125000000, 0.00039062500000, 0.00019531250000, 0.00009765625000, 0.00004882812500, 0.03125000000000, 0.01562500000000, 0.00781250000000, 0.00390625000000, 0.00195312500000, 0.00097656250000, 0.00048828125000 };
const double ButterworthHighpass::INGAIN[] =  { 0.02138343678538, 0.01072893081723, 0.00537378659199, 0.00268922480526, 0.00134519599563, 0.00067274393452, 0.00033640845372, 0.20088384377817, 0.10399514173992, 0.05290451840255, 0.02668333804887, 0.01339951036209, 0.00671431426877, 0.00336080170747 };
const double ButterworthHighpass::OUTGAIN[] = { 46.44164757717499, 92.88297516568801, 185.76584441408542, 371.53183469726190, 743.06362944005275, 1486.12723888470190, 2972.25449001885360, 4.64413732097647, 9.28779242553134, 18.57676315697171, 37.15277423819102, 74.30649471294926, 148.61278978249788, 297.22547974899260 };

const double ButterworthHighpass::NUM[ButterworthHighpass::NSPECS][ButterworthHighpass::ORDER+1] =  {
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    { 1.00000000000000 ,-2.00000000000000 ,1.00000000000000 },
    };
const double ButterworthHighpass::DEN[ButterworthHighpass::NSPECS][ButterworthHighpass::ORDER] = {
    { -1.9861162115408895 ,0.9862119291607510 },
    { -1.9930580231432053 ,0.9930820354622119 },
    { -1.9965290011803514 ,0.9965350146693883 },
    { -1.9982644992873209 ,0.9982660039635655 },
    { -1.9991322494805561 ,0.9991326258127924 },
    { -1.9995661247198748 ,0.9995662188233417 },
    { -1.9997830623573858 ,0.9997830858858042 },
    { -1.8613611468290827 ,0.8703674774564694 },
    { -1.9306064272196681 ,0.9329347317566124 },
    { -1.9652933726226902 ,0.9658854605688175 },
    { -1.9826454185041165 ,0.9827947192998338 },
    { -1.9913225483591697 ,0.9913600351490708 },
    { -1.9956612539149390 ,0.9956706459210220 },
    { -1.9978306244147619 ,0.9978329749617484 },
    };


ButterworthHighpass::ButterworthHighpass(int spec_pos)
    : filter_(0),
      spec_pos_(spec_pos)
{
    filter_ = new SPUC::iir_2nd<double>(NUM[spec_pos][0],NUM[spec_pos][1],NUM[spec_pos][2],DEN[spec_pos][0],DEN[spec_pos][1]);
}

double ButterworthHighpass::clock(double sample)
{
    if(filter_)
        return OUTGAIN[spec_pos_] * filter_->clock(sample * INGAIN[spec_pos_]);
    else
        return sample;

}

}
